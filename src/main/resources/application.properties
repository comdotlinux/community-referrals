quarkus.http.port=${PORT:8080}
quarkus.container-image.build=true
quarkus.container-image.group=registry.heroku.com/community-referrals
quarkus.container-image.name=web
quarkus.container-image.tag=latest
# https://quarkus.io/guides/all-config#quarkus-core_quarkus.package.type
quarkus.package.type=jar
quarkus.native.container-build=false
#quarkus.native.resources.includes=META-INF/VAADIN/**
#quarkus.native.additional-build-args=-H:ReflectionConfigurationFiles=reflection-config.json,--initialize-at-run-time=org.atmosphere.container,--allow-incomplete-classpath,--initialize-at-run-time=com.vaadin.flow.server.communication.PushRequestHandler
#quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-native-image:22.1-java17-amd64

quarkus.oidc.auth-server-url=https://auth.kulkarni.cloud/realms/referrals
#%dev.quarkus.oidc.auth-server-url=https://localhost:8543/realms/quarkus

#%dev.quarkus.oidc.client-id=backend-service
quarkus.oidc.client-id=community-referrals-service

quarkus.oidc.application-type=web-app
#%dev.quarkus.oidc.credentials.secret=secret
#%dev.quarkus.oidc.tls.verification=none

quarkus.oidc.roles.source=userinfo
quarkus.oidc.roles.role-claim-path=realm_access/roles



# configure your datasource
%dev.quarkus.datasource.db-kind = postgresql
%dev.quarkus.datasource.username = postgres
%dev.quarkus.datasource.password = postgres
%dev.quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/postgres

# drop and create the database at startup (use `update` to only update the schema)
%dev.quarkus.hibernate-orm.database.generation = drop-and-create



# https://quarkus.io/guides/security-authorization
quarkus.http.auth.policy.user-policy1.roles-allowed=user
#quarkus.http.auth.policy.admin-policy1.roles-allowed=admin

quarkus.http.auth.permission.roles1.paths=/referral,/referral/*
quarkus.http.auth.permission.roles1.policy=user-policy1

#quarkus.http.auth.permission.roles2.paths=/api/*,/admin/*
#quarkus.http.auth.permission.roles2.policy=admin-policy1