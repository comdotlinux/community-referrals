package com.example.starter.base

import com.linux.jobs.boundry.AppConfig
import com.vaadin.flow.component.ClickEvent
import com.vaadin.flow.component.KeyDownEvent
import com.vaadin.flow.component.PollEvent
import com.vaadin.flow.component.internal.JavaScriptBootstrapUI
import io.quarkus.runtime.annotations.RegisterForReflection

/**
 * Vaadin uses reflection behind the scenes, so we need to give some hints
 * for the native compilation. In optimal situation, Vaadin extension would
 * provide this list, but we are still not ready to do that for all of our
 * modules. You can collect the list manually while using the app, or get
 * that generated using a Java agent.
 *
 *
 * See e.g. [these great instructions](https://simply-how.com/fix-graalvm-native-image-compilation-issues#section-4).
 *
 *
 *
 * If you are not using the reflect-config.json directly, like in this example,
 * some of the hints generated by the agent are "false positives" and can be
 * ignored. Based on experience, all event classes needs to be on the list and
 *
 *
 * <pre>
 * {
 * "name":"com.example.starter.base.MainView",
 * "queryAllDeclaredMethods":true
 * },
</pre> *
 */
@RegisterForReflection(targets = [AppConfig::class, ClickEvent::class, PollEvent::class, KeyDownEvent::class, JavaScriptBootstrapUI::class])
class ReflectionConfig